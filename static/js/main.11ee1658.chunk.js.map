{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NoSort","sortType","setSortType","isReversed","setIsReversed","shouldShowResetBtn","prepearedGoods","goods","goodsToEdit","sort","firstGood","secondGood","ByAlphabet","localeCompare","ByLength","length","reverse","prepeareGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,wBAAAA,E,oBAAAA,E,WAAAA,M,KAML,IA2BaE,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,QAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAeMC,EAAqBF,GAAcF,EAEnCK,EA9Cc,SACpBC,EACAN,EACAE,GAEA,IAAMK,EAAW,YAAOD,GAmBxB,OAjBIN,GACFO,EAAYC,MAAK,SAACC,EAAWC,GAC3B,OAAQV,GACN,KAAKL,EAASgB,WACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKf,EAASkB,SACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OACvC,QACE,OAAO,MAKXZ,GACFK,EAAYQ,UAGPR,EAsBgBS,CAAcpB,EAAiBI,EAAUE,GAEhE,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,IAAaL,EAASgB,aAEtCS,QAAS,kBAAMnB,EAAYN,EAASgB,aANtC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYnB,IAAaL,EAASkB,WAEtCO,QAAS,kBAAMnB,EAAYN,EAASkB,WANtC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAA2B,IAAfjB,IAEhBkB,QAAS,WA9CbjB,GADiB,IAAfD,IAyCA,qBAUCE,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,kBA/CjBnB,EAAYN,EAASI,aACrBI,GAAc,IA2CR,sBAWJ,6BACE,6BAEIE,EAAegB,KAAI,SAACC,GAAD,OACjB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCxHtCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.11ee1658.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ByAlphabet = 'byAlphabet',\n  ByLength = 'byLength',\n  NoSort = '',\n}\n\nconst prepeareGoods = (\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) => {\n  const goodsToEdit = [...goods];\n\n  if (sortType) {\n    goodsToEdit.sort((firstGood, secondGood) => {\n      switch (sortType) {\n        case SortType.ByAlphabet:\n          return firstGood.localeCompare(secondGood);\n        case SortType.ByLength:\n          return firstGood.length - secondGood.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    goodsToEdit.reverse();\n  }\n\n  return goodsToEdit;\n};\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NoSort);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const setIsReversedToggle = () => {\n    if (isReversed === true) {\n      setIsReversed(false);\n    } else {\n      setIsReversed(true);\n    }\n  };\n\n  const resetAllFilters = (): void => {\n    setSortType(SortType.NoSort);\n    setIsReversed(false);\n  };\n\n  const shouldShowResetBtn = isReversed || sortType;\n\n  const prepearedGoods = prepeareGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ByAlphabet },\n          )}\n          onClick={() => setSortType(SortType.ByAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortType !== SortType.ByLength },\n          )}\n          onClick={() => setSortType(SortType.ByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={() => setIsReversedToggle()}\n        >\n          Reverse\n        </button>\n        {shouldShowResetBtn && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => resetAllFilters()}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        <ul>\n          {\n            prepearedGoods.map((good: string) => (\n              <li data-cy=\"Good\" key={good}>\n                {good}\n              </li>\n            ))\n          }\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}